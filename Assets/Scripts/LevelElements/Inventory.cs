using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class Inventory : MonoBehaviour
{
    public static Inventory instance = null;
    private List<string> PaintingsToSteal = new List<string>();
    public List<string> PlayerInventory = new List<string>();
    public List<string> GetPaintingsToSteal()
    {
        if(PaintingsToSteal.Count ==0)
        {
            SelectRandomPaintings();
        }
        return PaintingsToSteal;
    }
    public delegate void OnInventoryChanged();
    public event OnInventoryChanged InventoryChanged;


    // üìå Liste des ≈ìuvres interdites
    private List<string> ForbiddenPaintings = new List<string>
    {
        "La Joconde",
        "Le portrait de Napol√©on en costume de sacre",
        "Portrait de Vincent Van Gogh",
        "Le fils de l‚Äôhomme",
        "Les 4 saisons",
        "Le r√™ve",
    };

    [SerializeField] private GameObject inventoryCanvas;

    void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Start()
{
    if (inventoryCanvas != null)
    {
        inventoryCanvas.SetActive(false);
    }
}

    void SelectRandomPaintings()
{
    PaintingsToSteal.Clear(); // R√©initialise la liste
    List<string> allPossiblePaintings = new List<string>
    {
        "La jeune fille √† la perle",
        "Les 4 saisons",
        "Le r√™ve",
        "La Dame en bleu",
        "La Joconde",
        "Les M√©nines",
        "Madame de Pompadour",
        "Autoportrait au collier d'√©pines et colibri",
        "Le fils de l'homme",
        "Portrait d‚Äôun homme au turban rouge",
        "Portrait de Napol√©on en costume de sacre",
        "Portrait de Vincent van Gogh",
    };

    for (int i = 0; i < 3; i++)
    {
        if (allPossiblePaintings.Count == 0) break; // S√©curit√©

        int randomIndex = Random.Range(0, allPossiblePaintings.Count);
        PaintingsToSteal.Add(allPossiblePaintings[randomIndex]);
        allPossiblePaintings.RemoveAt(randomIndex); // Emp√™che les doublons
    }

    Debug.Log("üñºÔ∏è Nouveaux tableaux √† voler : " + string.Join(", ", PaintingsToSteal));
}


    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            ToggleInventory();
        }
    }

    void ToggleInventory()
    {
        if (inventoryCanvas != null)
        {
            bool isActive = inventoryCanvas.activeSelf;
            inventoryCanvas.SetActive(!isActive);
        }
    }

    public void AddItem(string item)
{
    if (!isInventoryFull())
    {
        if (!string.IsNullOrEmpty(item))
        {
            PlayerInventory.Add(item);
            Debug.Log("üì¶ Ajout√© √† l'inventaire : " + item);
            Debug.Log("üìã Contenu actuel de l'inventaire : " + string.Join(", ", PlayerInventory));

            InventoryChanged?.Invoke(); // Notifie l'UI que l'inventaire a chang√©
        }
    }
}



    public void DeleteItem(string item)
    {
        int id = PlayerInventory.FindIndex(x => x == item);
        if (id != -1)
        {
            PlayerInventory.RemoveAt(id);
            Debug.Log(item + " supprim√© de l'inventaire");
        }
    }

    public bool isInventoryFull()
    {
        return PlayerInventory.Count >= 3;
    }

    // ‚úÖ V√©rifie si la mission est r√©ussie ou √©chou√©e
    public bool HasCompletedMission(out List<string> forbiddenCollected)
{
    forbiddenCollected = new List<string>();

    Debug.Log("üìå V√©rification des ≈ìuvres interdites...");
    foreach (string painting in ForbiddenPaintings)
    {
        if (PlayerInventory.Contains(painting))
        {
            forbiddenCollected.Add(painting);
        }
    }

    // Affiche les ≈ìuvres interdites d√©tect√©es
    if (forbiddenCollected.Count > 0)
    {
        Debug.Log("‚ùå ≈íuvres interdites trouv√©es : " + string.Join(", ", forbiddenCollected));
        return false;
    }

    Debug.Log("‚úÖ Aucun tableau interdit vol√©. V√©rification des tableaux requis...");

    foreach (string painting in PaintingsToSteal)
    {
        if (!PlayerInventory.Contains(painting))
        {
            Debug.Log("‚ùå Il manque : " + painting);
            return false; // Si une ≈ìuvre manque, la mission est incompl√®te
        }
    }

    Debug.Log("‚úÖ Mission r√©ussie : toutes les ≈ìuvres requises ont √©t√© vol√©es !");
    return true;
}


}
